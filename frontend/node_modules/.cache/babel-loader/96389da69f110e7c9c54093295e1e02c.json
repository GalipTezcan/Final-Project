{"ast":null,"code":"import { __privateAdd, __privateGet, __privateMethod, __privateSet } from \"./chunk-PXG64RU4.js\";\n\n// src/query.ts\nimport { ensureQueryFn, noop, replaceData, resolveEnabled, skipToken, timeUntilStale } from \"./utils.js\";\nimport { notifyManager } from \"./notifyManager.js\";\nimport { canFetch, createRetryer, isCancelledError } from \"./retryer.js\";\nimport { Removable } from \"./removable.js\";\nvar _initialState, _revertState, _cache, _client, _retryer, _defaultOptions, _abortSignalConsumed, _Query_instances, dispatch_fn;\nvar Query = class extends Removable {\n  constructor(config) {\n    super();\n    __privateAdd(this, _Query_instances);\n    __privateAdd(this, _initialState);\n    __privateAdd(this, _revertState);\n    __privateAdd(this, _cache);\n    __privateAdd(this, _client);\n    __privateAdd(this, _retryer);\n    __privateAdd(this, _defaultOptions);\n    __privateAdd(this, _abortSignalConsumed);\n    __privateSet(this, _abortSignalConsumed, false);\n    __privateSet(this, _defaultOptions, config.defaultOptions);\n    this.setOptions(config.options);\n    this.observers = [];\n    __privateSet(this, _client, config.client);\n    __privateSet(this, _cache, __privateGet(this, _client).getQueryCache());\n    this.queryKey = config.queryKey;\n    this.queryHash = config.queryHash;\n    __privateSet(this, _initialState, getDefaultState(this.options));\n    this.state = config.state ?? __privateGet(this, _initialState);\n    this.scheduleGc();\n  }\n  get meta() {\n    return this.options.meta;\n  }\n  get promise() {\n    var _a;\n    return (_a = __privateGet(this, _retryer)) == null ? void 0 : _a.promise;\n  }\n  setOptions(options) {\n    this.options = {\n      ...__privateGet(this, _defaultOptions),\n      ...options\n    };\n    this.updateGcTime(this.options.gcTime);\n  }\n  optionalRemove() {\n    if (!this.observers.length && this.state.fetchStatus === \"idle\") {\n      __privateGet(this, _cache).remove(this);\n    }\n  }\n  setData(newData, options) {\n    const data = replaceData(this.state.data, newData, this.options);\n    __privateMethod(this, _Query_instances, dispatch_fn).call(this, {\n      data,\n      type: \"success\",\n      dataUpdatedAt: options == null ? void 0 : options.updatedAt,\n      manual: options == null ? void 0 : options.manual\n    });\n    return data;\n  }\n  setState(state, setStateOptions) {\n    __privateMethod(this, _Query_instances, dispatch_fn).call(this, {\n      type: \"setState\",\n      state,\n      setStateOptions\n    });\n  }\n  cancel(options) {\n    var _a, _b;\n    const promise = (_a = __privateGet(this, _retryer)) == null ? void 0 : _a.promise;\n    (_b = __privateGet(this, _retryer)) == null ? void 0 : _b.cancel(options);\n    return promise ? promise.then(noop).catch(noop) : Promise.resolve();\n  }\n  destroy() {\n    super.destroy();\n    this.cancel({\n      silent: true\n    });\n  }\n  reset() {\n    this.destroy();\n    this.setState(__privateGet(this, _initialState));\n  }\n  isActive() {\n    return this.observers.some(observer => resolveEnabled(observer.options.enabled, this) !== false);\n  }\n  isDisabled() {\n    if (this.getObserversCount() > 0) {\n      return !this.isActive();\n    }\n    return this.options.queryFn === skipToken || this.state.dataUpdateCount + this.state.errorUpdateCount === 0;\n  }\n  isStale() {\n    if (this.state.isInvalidated) {\n      return true;\n    }\n    if (this.getObserversCount() > 0) {\n      return this.observers.some(observer => observer.getCurrentResult().isStale);\n    }\n    return this.state.data === void 0;\n  }\n  isStaleByTime(staleTime = 0) {\n    return this.state.isInvalidated || this.state.data === void 0 || !timeUntilStale(this.state.dataUpdatedAt, staleTime);\n  }\n  onFocus() {\n    var _a;\n    const observer = this.observers.find(x => x.shouldFetchOnWindowFocus());\n    observer == null ? void 0 : observer.refetch({\n      cancelRefetch: false\n    });\n    (_a = __privateGet(this, _retryer)) == null ? void 0 : _a.continue();\n  }\n  onOnline() {\n    var _a;\n    const observer = this.observers.find(x => x.shouldFetchOnReconnect());\n    observer == null ? void 0 : observer.refetch({\n      cancelRefetch: false\n    });\n    (_a = __privateGet(this, _retryer)) == null ? void 0 : _a.continue();\n  }\n  addObserver(observer) {\n    if (!this.observers.includes(observer)) {\n      this.observers.push(observer);\n      this.clearGcTimeout();\n      __privateGet(this, _cache).notify({\n        type: \"observerAdded\",\n        query: this,\n        observer\n      });\n    }\n  }\n  removeObserver(observer) {\n    if (this.observers.includes(observer)) {\n      this.observers = this.observers.filter(x => x !== observer);\n      if (!this.observers.length) {\n        if (__privateGet(this, _retryer)) {\n          if (__privateGet(this, _abortSignalConsumed)) {\n            __privateGet(this, _retryer).cancel({\n              revert: true\n            });\n          } else {\n            __privateGet(this, _retryer).cancelRetry();\n          }\n        }\n        this.scheduleGc();\n      }\n      __privateGet(this, _cache).notify({\n        type: \"observerRemoved\",\n        query: this,\n        observer\n      });\n    }\n  }\n  getObserversCount() {\n    return this.observers.length;\n  }\n  invalidate() {\n    if (!this.state.isInvalidated) {\n      __privateMethod(this, _Query_instances, dispatch_fn).call(this, {\n        type: \"invalidate\"\n      });\n    }\n  }\n  fetch(options, fetchOptions) {\n    var _a, _b, _c;\n    if (this.state.fetchStatus !== \"idle\") {\n      if (this.state.data !== void 0 && (fetchOptions == null ? void 0 : fetchOptions.cancelRefetch)) {\n        this.cancel({\n          silent: true\n        });\n      } else if (__privateGet(this, _retryer)) {\n        __privateGet(this, _retryer).continueRetry();\n        return __privateGet(this, _retryer).promise;\n      }\n    }\n    if (options) {\n      this.setOptions(options);\n    }\n    if (!this.options.queryFn) {\n      const observer = this.observers.find(x => x.options.queryFn);\n      if (observer) {\n        this.setOptions(observer.options);\n      }\n    }\n    if (process.env.NODE_ENV !== \"production\") {\n      if (!Array.isArray(this.options.queryKey)) {\n        console.error(`As of v4, queryKey needs to be an Array. If you are using a string like 'repoData', please change it to an Array, e.g. ['repoData']`);\n      }\n    }\n    const abortController = new AbortController();\n    const addSignalProperty = object => {\n      Object.defineProperty(object, \"signal\", {\n        enumerable: true,\n        get: () => {\n          __privateSet(this, _abortSignalConsumed, true);\n          return abortController.signal;\n        }\n      });\n    };\n    const fetchFn = () => {\n      const queryFn = ensureQueryFn(this.options, fetchOptions);\n      const queryFnContext = {\n        client: __privateGet(this, _client),\n        queryKey: this.queryKey,\n        meta: this.meta\n      };\n      addSignalProperty(queryFnContext);\n      __privateSet(this, _abortSignalConsumed, false);\n      if (this.options.persister) {\n        return this.options.persister(queryFn, queryFnContext, this);\n      }\n      return queryFn(queryFnContext);\n    };\n    const context = {\n      fetchOptions,\n      options: this.options,\n      queryKey: this.queryKey,\n      client: __privateGet(this, _client),\n      state: this.state,\n      fetchFn\n    };\n    addSignalProperty(context);\n    (_a = this.options.behavior) == null ? void 0 : _a.onFetch(context, this);\n    __privateSet(this, _revertState, this.state);\n    if (this.state.fetchStatus === \"idle\" || this.state.fetchMeta !== ((_b = context.fetchOptions) == null ? void 0 : _b.meta)) {\n      __privateMethod(this, _Query_instances, dispatch_fn).call(this, {\n        type: \"fetch\",\n        meta: (_c = context.fetchOptions) == null ? void 0 : _c.meta\n      });\n    }\n    const onError = error => {\n      var _a2, _b2, _c2, _d;\n      if (!(isCancelledError(error) && error.silent)) {\n        __privateMethod(this, _Query_instances, dispatch_fn).call(this, {\n          type: \"error\",\n          error\n        });\n      }\n      if (!isCancelledError(error)) {\n        (_b2 = (_a2 = __privateGet(this, _cache).config).onError) == null ? void 0 : _b2.call(_a2, error, this);\n        (_d = (_c2 = __privateGet(this, _cache).config).onSettled) == null ? void 0 : _d.call(_c2, this.state.data, error, this);\n      }\n      this.scheduleGc();\n    };\n    __privateSet(this, _retryer, createRetryer({\n      initialPromise: fetchOptions == null ? void 0 : fetchOptions.initialPromise,\n      fn: context.fetchFn,\n      abort: abortController.abort.bind(abortController),\n      onSuccess: data => {\n        var _a2, _b2, _c2, _d;\n        if (data === void 0) {\n          if (process.env.NODE_ENV !== \"production\") {\n            console.error(`Query data cannot be undefined. Please make sure to return a value other than undefined from your query function. Affected query key: ${this.queryHash}`);\n          }\n          onError(new Error(`${this.queryHash} data is undefined`));\n          return;\n        }\n        try {\n          this.setData(data);\n        } catch (error) {\n          onError(error);\n          return;\n        }\n        (_b2 = (_a2 = __privateGet(this, _cache).config).onSuccess) == null ? void 0 : _b2.call(_a2, data, this);\n        (_d = (_c2 = __privateGet(this, _cache).config).onSettled) == null ? void 0 : _d.call(_c2, data, this.state.error, this);\n        this.scheduleGc();\n      },\n      onError,\n      onFail: (failureCount, error) => {\n        __privateMethod(this, _Query_instances, dispatch_fn).call(this, {\n          type: \"failed\",\n          failureCount,\n          error\n        });\n      },\n      onPause: () => {\n        __privateMethod(this, _Query_instances, dispatch_fn).call(this, {\n          type: \"pause\"\n        });\n      },\n      onContinue: () => {\n        __privateMethod(this, _Query_instances, dispatch_fn).call(this, {\n          type: \"continue\"\n        });\n      },\n      retry: context.options.retry,\n      retryDelay: context.options.retryDelay,\n      networkMode: context.options.networkMode,\n      canRun: () => true\n    }));\n    return __privateGet(this, _retryer).start();\n  }\n};\n_initialState = new WeakMap();\n_revertState = new WeakMap();\n_cache = new WeakMap();\n_client = new WeakMap();\n_retryer = new WeakMap();\n_defaultOptions = new WeakMap();\n_abortSignalConsumed = new WeakMap();\n_Query_instances = new WeakSet();\ndispatch_fn = function (action) {\n  const reducer = state => {\n    switch (action.type) {\n      case \"failed\":\n        return {\n          ...state,\n          fetchFailureCount: action.failureCount,\n          fetchFailureReason: action.error\n        };\n      case \"pause\":\n        return {\n          ...state,\n          fetchStatus: \"paused\"\n        };\n      case \"continue\":\n        return {\n          ...state,\n          fetchStatus: \"fetching\"\n        };\n      case \"fetch\":\n        return {\n          ...state,\n          ...fetchState(state.data, this.options),\n          fetchMeta: action.meta ?? null\n        };\n      case \"success\":\n        return {\n          ...state,\n          data: action.data,\n          dataUpdateCount: state.dataUpdateCount + 1,\n          dataUpdatedAt: action.dataUpdatedAt ?? Date.now(),\n          error: null,\n          isInvalidated: false,\n          status: \"success\",\n          ...(!action.manual && {\n            fetchStatus: \"idle\",\n            fetchFailureCount: 0,\n            fetchFailureReason: null\n          })\n        };\n      case \"error\":\n        const error = action.error;\n        if (isCancelledError(error) && error.revert && __privateGet(this, _revertState)) {\n          return {\n            ...__privateGet(this, _revertState),\n            fetchStatus: \"idle\"\n          };\n        }\n        return {\n          ...state,\n          error,\n          errorUpdateCount: state.errorUpdateCount + 1,\n          errorUpdatedAt: Date.now(),\n          fetchFailureCount: state.fetchFailureCount + 1,\n          fetchFailureReason: error,\n          fetchStatus: \"idle\",\n          status: \"error\"\n        };\n      case \"invalidate\":\n        return {\n          ...state,\n          isInvalidated: true\n        };\n      case \"setState\":\n        return {\n          ...state,\n          ...action.state\n        };\n    }\n  };\n  this.state = reducer(this.state);\n  notifyManager.batch(() => {\n    this.observers.forEach(observer => {\n      observer.onQueryUpdate();\n    });\n    __privateGet(this, _cache).notify({\n      query: this,\n      type: \"updated\",\n      action\n    });\n  });\n};\nfunction fetchState(data, options) {\n  return {\n    fetchFailureCount: 0,\n    fetchFailureReason: null,\n    fetchStatus: canFetch(options.networkMode) ? \"fetching\" : \"paused\",\n    ...(data === void 0 && {\n      error: null,\n      status: \"pending\"\n    })\n  };\n}\nfunction getDefaultState(options) {\n  const data = typeof options.initialData === \"function\" ? options.initialData() : options.initialData;\n  const hasData = data !== void 0;\n  const initialDataUpdatedAt = hasData ? typeof options.initialDataUpdatedAt === \"function\" ? options.initialDataUpdatedAt() : options.initialDataUpdatedAt : 0;\n  return {\n    data,\n    dataUpdateCount: 0,\n    dataUpdatedAt: hasData ? initialDataUpdatedAt ?? Date.now() : 0,\n    error: null,\n    errorUpdateCount: 0,\n    errorUpdatedAt: 0,\n    fetchFailureCount: 0,\n    fetchFailureReason: null,\n    fetchMeta: null,\n    isInvalidated: false,\n    status: hasData ? \"success\" : \"pending\",\n    fetchStatus: \"idle\"\n  };\n}\nexport { Query, fetchState };","map":{"version":3,"names":["__privateAdd","__privateGet","__privateMethod","__privateSet","ensureQueryFn","noop","replaceData","resolveEnabled","skipToken","timeUntilStale","notifyManager","canFetch","createRetryer","isCancelledError","Removable","_initialState","_revertState","_cache","_client","_retryer","_defaultOptions","_abortSignalConsumed","_Query_instances","dispatch_fn","Query","constructor","config","defaultOptions","setOptions","options","observers","client","getQueryCache","queryKey","queryHash","getDefaultState","state","scheduleGc","meta","promise","_a","updateGcTime","gcTime","optionalRemove","length","fetchStatus","remove","setData","newData","data","call","type","dataUpdatedAt","updatedAt","manual","setState","setStateOptions","cancel","_b","then","catch","Promise","resolve","destroy","silent","reset","isActive","some","observer","enabled","isDisabled","getObserversCount","queryFn","dataUpdateCount","errorUpdateCount","isStale","isInvalidated","getCurrentResult","isStaleByTime","staleTime","onFocus","find","x","shouldFetchOnWindowFocus","refetch","cancelRefetch","continue","onOnline","shouldFetchOnReconnect","addObserver","includes","push","clearGcTimeout","notify","query","removeObserver","filter","revert","cancelRetry","invalidate","fetch","fetchOptions","_c","continueRetry","process","env","NODE_ENV","Array","isArray","console","error","abortController","AbortController","addSignalProperty","object","Object","defineProperty","enumerable","get","signal","fetchFn","queryFnContext","persister","context","behavior","onFetch","fetchMeta","onError","_a2","_b2","_c2","_d","onSettled","initialPromise","fn","abort","bind","onSuccess","Error","onFail","failureCount","onPause","onContinue","retry","retryDelay","networkMode","canRun","start","WeakMap","WeakSet","action","reducer","fetchFailureCount","fetchFailureReason","fetchState","Date","now","status","errorUpdatedAt","batch","forEach","onQueryUpdate","initialData","hasData","initialDataUpdatedAt"],"sources":["/Users/bts-ank-0608/Final-Project/frontend/node_modules/@tanstack/query-core/build/legacy/query.js"],"sourcesContent":["import {\n  __privateAdd,\n  __privateGet,\n  __privateMethod,\n  __privateSet\n} from \"./chunk-PXG64RU4.js\";\n\n// src/query.ts\nimport {\n  ensureQueryFn,\n  noop,\n  replaceData,\n  resolveEnabled,\n  skipToken,\n  timeUntilStale\n} from \"./utils.js\";\nimport { notifyManager } from \"./notifyManager.js\";\nimport { canFetch, createRetryer, isCancelledError } from \"./retryer.js\";\nimport { Removable } from \"./removable.js\";\nvar _initialState, _revertState, _cache, _client, _retryer, _defaultOptions, _abortSignalConsumed, _Query_instances, dispatch_fn;\nvar Query = class extends Removable {\n  constructor(config) {\n    super();\n    __privateAdd(this, _Query_instances);\n    __privateAdd(this, _initialState);\n    __privateAdd(this, _revertState);\n    __privateAdd(this, _cache);\n    __privateAdd(this, _client);\n    __privateAdd(this, _retryer);\n    __privateAdd(this, _defaultOptions);\n    __privateAdd(this, _abortSignalConsumed);\n    __privateSet(this, _abortSignalConsumed, false);\n    __privateSet(this, _defaultOptions, config.defaultOptions);\n    this.setOptions(config.options);\n    this.observers = [];\n    __privateSet(this, _client, config.client);\n    __privateSet(this, _cache, __privateGet(this, _client).getQueryCache());\n    this.queryKey = config.queryKey;\n    this.queryHash = config.queryHash;\n    __privateSet(this, _initialState, getDefaultState(this.options));\n    this.state = config.state ?? __privateGet(this, _initialState);\n    this.scheduleGc();\n  }\n  get meta() {\n    return this.options.meta;\n  }\n  get promise() {\n    var _a;\n    return (_a = __privateGet(this, _retryer)) == null ? void 0 : _a.promise;\n  }\n  setOptions(options) {\n    this.options = { ...__privateGet(this, _defaultOptions), ...options };\n    this.updateGcTime(this.options.gcTime);\n  }\n  optionalRemove() {\n    if (!this.observers.length && this.state.fetchStatus === \"idle\") {\n      __privateGet(this, _cache).remove(this);\n    }\n  }\n  setData(newData, options) {\n    const data = replaceData(this.state.data, newData, this.options);\n    __privateMethod(this, _Query_instances, dispatch_fn).call(this, {\n      data,\n      type: \"success\",\n      dataUpdatedAt: options == null ? void 0 : options.updatedAt,\n      manual: options == null ? void 0 : options.manual\n    });\n    return data;\n  }\n  setState(state, setStateOptions) {\n    __privateMethod(this, _Query_instances, dispatch_fn).call(this, { type: \"setState\", state, setStateOptions });\n  }\n  cancel(options) {\n    var _a, _b;\n    const promise = (_a = __privateGet(this, _retryer)) == null ? void 0 : _a.promise;\n    (_b = __privateGet(this, _retryer)) == null ? void 0 : _b.cancel(options);\n    return promise ? promise.then(noop).catch(noop) : Promise.resolve();\n  }\n  destroy() {\n    super.destroy();\n    this.cancel({ silent: true });\n  }\n  reset() {\n    this.destroy();\n    this.setState(__privateGet(this, _initialState));\n  }\n  isActive() {\n    return this.observers.some(\n      (observer) => resolveEnabled(observer.options.enabled, this) !== false\n    );\n  }\n  isDisabled() {\n    if (this.getObserversCount() > 0) {\n      return !this.isActive();\n    }\n    return this.options.queryFn === skipToken || this.state.dataUpdateCount + this.state.errorUpdateCount === 0;\n  }\n  isStale() {\n    if (this.state.isInvalidated) {\n      return true;\n    }\n    if (this.getObserversCount() > 0) {\n      return this.observers.some(\n        (observer) => observer.getCurrentResult().isStale\n      );\n    }\n    return this.state.data === void 0;\n  }\n  isStaleByTime(staleTime = 0) {\n    return this.state.isInvalidated || this.state.data === void 0 || !timeUntilStale(this.state.dataUpdatedAt, staleTime);\n  }\n  onFocus() {\n    var _a;\n    const observer = this.observers.find((x) => x.shouldFetchOnWindowFocus());\n    observer == null ? void 0 : observer.refetch({ cancelRefetch: false });\n    (_a = __privateGet(this, _retryer)) == null ? void 0 : _a.continue();\n  }\n  onOnline() {\n    var _a;\n    const observer = this.observers.find((x) => x.shouldFetchOnReconnect());\n    observer == null ? void 0 : observer.refetch({ cancelRefetch: false });\n    (_a = __privateGet(this, _retryer)) == null ? void 0 : _a.continue();\n  }\n  addObserver(observer) {\n    if (!this.observers.includes(observer)) {\n      this.observers.push(observer);\n      this.clearGcTimeout();\n      __privateGet(this, _cache).notify({ type: \"observerAdded\", query: this, observer });\n    }\n  }\n  removeObserver(observer) {\n    if (this.observers.includes(observer)) {\n      this.observers = this.observers.filter((x) => x !== observer);\n      if (!this.observers.length) {\n        if (__privateGet(this, _retryer)) {\n          if (__privateGet(this, _abortSignalConsumed)) {\n            __privateGet(this, _retryer).cancel({ revert: true });\n          } else {\n            __privateGet(this, _retryer).cancelRetry();\n          }\n        }\n        this.scheduleGc();\n      }\n      __privateGet(this, _cache).notify({ type: \"observerRemoved\", query: this, observer });\n    }\n  }\n  getObserversCount() {\n    return this.observers.length;\n  }\n  invalidate() {\n    if (!this.state.isInvalidated) {\n      __privateMethod(this, _Query_instances, dispatch_fn).call(this, { type: \"invalidate\" });\n    }\n  }\n  fetch(options, fetchOptions) {\n    var _a, _b, _c;\n    if (this.state.fetchStatus !== \"idle\") {\n      if (this.state.data !== void 0 && (fetchOptions == null ? void 0 : fetchOptions.cancelRefetch)) {\n        this.cancel({ silent: true });\n      } else if (__privateGet(this, _retryer)) {\n        __privateGet(this, _retryer).continueRetry();\n        return __privateGet(this, _retryer).promise;\n      }\n    }\n    if (options) {\n      this.setOptions(options);\n    }\n    if (!this.options.queryFn) {\n      const observer = this.observers.find((x) => x.options.queryFn);\n      if (observer) {\n        this.setOptions(observer.options);\n      }\n    }\n    if (process.env.NODE_ENV !== \"production\") {\n      if (!Array.isArray(this.options.queryKey)) {\n        console.error(\n          `As of v4, queryKey needs to be an Array. If you are using a string like 'repoData', please change it to an Array, e.g. ['repoData']`\n        );\n      }\n    }\n    const abortController = new AbortController();\n    const addSignalProperty = (object) => {\n      Object.defineProperty(object, \"signal\", {\n        enumerable: true,\n        get: () => {\n          __privateSet(this, _abortSignalConsumed, true);\n          return abortController.signal;\n        }\n      });\n    };\n    const fetchFn = () => {\n      const queryFn = ensureQueryFn(this.options, fetchOptions);\n      const queryFnContext = {\n        client: __privateGet(this, _client),\n        queryKey: this.queryKey,\n        meta: this.meta\n      };\n      addSignalProperty(queryFnContext);\n      __privateSet(this, _abortSignalConsumed, false);\n      if (this.options.persister) {\n        return this.options.persister(\n          queryFn,\n          queryFnContext,\n          this\n        );\n      }\n      return queryFn(queryFnContext);\n    };\n    const context = {\n      fetchOptions,\n      options: this.options,\n      queryKey: this.queryKey,\n      client: __privateGet(this, _client),\n      state: this.state,\n      fetchFn\n    };\n    addSignalProperty(context);\n    (_a = this.options.behavior) == null ? void 0 : _a.onFetch(\n      context,\n      this\n    );\n    __privateSet(this, _revertState, this.state);\n    if (this.state.fetchStatus === \"idle\" || this.state.fetchMeta !== ((_b = context.fetchOptions) == null ? void 0 : _b.meta)) {\n      __privateMethod(this, _Query_instances, dispatch_fn).call(this, { type: \"fetch\", meta: (_c = context.fetchOptions) == null ? void 0 : _c.meta });\n    }\n    const onError = (error) => {\n      var _a2, _b2, _c2, _d;\n      if (!(isCancelledError(error) && error.silent)) {\n        __privateMethod(this, _Query_instances, dispatch_fn).call(this, {\n          type: \"error\",\n          error\n        });\n      }\n      if (!isCancelledError(error)) {\n        (_b2 = (_a2 = __privateGet(this, _cache).config).onError) == null ? void 0 : _b2.call(\n          _a2,\n          error,\n          this\n        );\n        (_d = (_c2 = __privateGet(this, _cache).config).onSettled) == null ? void 0 : _d.call(\n          _c2,\n          this.state.data,\n          error,\n          this\n        );\n      }\n      this.scheduleGc();\n    };\n    __privateSet(this, _retryer, createRetryer({\n      initialPromise: fetchOptions == null ? void 0 : fetchOptions.initialPromise,\n      fn: context.fetchFn,\n      abort: abortController.abort.bind(abortController),\n      onSuccess: (data) => {\n        var _a2, _b2, _c2, _d;\n        if (data === void 0) {\n          if (process.env.NODE_ENV !== \"production\") {\n            console.error(\n              `Query data cannot be undefined. Please make sure to return a value other than undefined from your query function. Affected query key: ${this.queryHash}`\n            );\n          }\n          onError(new Error(`${this.queryHash} data is undefined`));\n          return;\n        }\n        try {\n          this.setData(data);\n        } catch (error) {\n          onError(error);\n          return;\n        }\n        (_b2 = (_a2 = __privateGet(this, _cache).config).onSuccess) == null ? void 0 : _b2.call(_a2, data, this);\n        (_d = (_c2 = __privateGet(this, _cache).config).onSettled) == null ? void 0 : _d.call(\n          _c2,\n          data,\n          this.state.error,\n          this\n        );\n        this.scheduleGc();\n      },\n      onError,\n      onFail: (failureCount, error) => {\n        __privateMethod(this, _Query_instances, dispatch_fn).call(this, { type: \"failed\", failureCount, error });\n      },\n      onPause: () => {\n        __privateMethod(this, _Query_instances, dispatch_fn).call(this, { type: \"pause\" });\n      },\n      onContinue: () => {\n        __privateMethod(this, _Query_instances, dispatch_fn).call(this, { type: \"continue\" });\n      },\n      retry: context.options.retry,\n      retryDelay: context.options.retryDelay,\n      networkMode: context.options.networkMode,\n      canRun: () => true\n    }));\n    return __privateGet(this, _retryer).start();\n  }\n};\n_initialState = new WeakMap();\n_revertState = new WeakMap();\n_cache = new WeakMap();\n_client = new WeakMap();\n_retryer = new WeakMap();\n_defaultOptions = new WeakMap();\n_abortSignalConsumed = new WeakMap();\n_Query_instances = new WeakSet();\ndispatch_fn = function(action) {\n  const reducer = (state) => {\n    switch (action.type) {\n      case \"failed\":\n        return {\n          ...state,\n          fetchFailureCount: action.failureCount,\n          fetchFailureReason: action.error\n        };\n      case \"pause\":\n        return {\n          ...state,\n          fetchStatus: \"paused\"\n        };\n      case \"continue\":\n        return {\n          ...state,\n          fetchStatus: \"fetching\"\n        };\n      case \"fetch\":\n        return {\n          ...state,\n          ...fetchState(state.data, this.options),\n          fetchMeta: action.meta ?? null\n        };\n      case \"success\":\n        return {\n          ...state,\n          data: action.data,\n          dataUpdateCount: state.dataUpdateCount + 1,\n          dataUpdatedAt: action.dataUpdatedAt ?? Date.now(),\n          error: null,\n          isInvalidated: false,\n          status: \"success\",\n          ...!action.manual && {\n            fetchStatus: \"idle\",\n            fetchFailureCount: 0,\n            fetchFailureReason: null\n          }\n        };\n      case \"error\":\n        const error = action.error;\n        if (isCancelledError(error) && error.revert && __privateGet(this, _revertState)) {\n          return { ...__privateGet(this, _revertState), fetchStatus: \"idle\" };\n        }\n        return {\n          ...state,\n          error,\n          errorUpdateCount: state.errorUpdateCount + 1,\n          errorUpdatedAt: Date.now(),\n          fetchFailureCount: state.fetchFailureCount + 1,\n          fetchFailureReason: error,\n          fetchStatus: \"idle\",\n          status: \"error\"\n        };\n      case \"invalidate\":\n        return {\n          ...state,\n          isInvalidated: true\n        };\n      case \"setState\":\n        return {\n          ...state,\n          ...action.state\n        };\n    }\n  };\n  this.state = reducer(this.state);\n  notifyManager.batch(() => {\n    this.observers.forEach((observer) => {\n      observer.onQueryUpdate();\n    });\n    __privateGet(this, _cache).notify({ query: this, type: \"updated\", action });\n  });\n};\nfunction fetchState(data, options) {\n  return {\n    fetchFailureCount: 0,\n    fetchFailureReason: null,\n    fetchStatus: canFetch(options.networkMode) ? \"fetching\" : \"paused\",\n    ...data === void 0 && {\n      error: null,\n      status: \"pending\"\n    }\n  };\n}\nfunction getDefaultState(options) {\n  const data = typeof options.initialData === \"function\" ? options.initialData() : options.initialData;\n  const hasData = data !== void 0;\n  const initialDataUpdatedAt = hasData ? typeof options.initialDataUpdatedAt === \"function\" ? options.initialDataUpdatedAt() : options.initialDataUpdatedAt : 0;\n  return {\n    data,\n    dataUpdateCount: 0,\n    dataUpdatedAt: hasData ? initialDataUpdatedAt ?? Date.now() : 0,\n    error: null,\n    errorUpdateCount: 0,\n    errorUpdatedAt: 0,\n    fetchFailureCount: 0,\n    fetchFailureReason: null,\n    fetchMeta: null,\n    isInvalidated: false,\n    status: hasData ? \"success\" : \"pending\",\n    fetchStatus: \"idle\"\n  };\n}\nexport {\n  Query,\n  fetchState\n};\n//# sourceMappingURL=query.js.map"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}