{"ast":null,"code":"import \"./chunk-PXG64RU4.js\";\n\n// src/streamedQuery.ts\nfunction streamedQuery({\n  queryFn,\n  refetchMode\n}) {\n  return async context => {\n    if (refetchMode !== \"append\") {\n      const query = context.client.getQueryCache().find({\n        queryKey: context.queryKey,\n        exact: true\n      });\n      if (query && query.state.data !== void 0) {\n        query.setState({\n          status: \"pending\",\n          data: void 0,\n          error: null,\n          fetchStatus: \"fetching\"\n        });\n      }\n    }\n    const stream = await queryFn(context);\n    for await (const chunk of stream) {\n      if (context.signal.aborted) {\n        break;\n      }\n      context.client.setQueryData(context.queryKey, (prev = []) => {\n        return prev.concat(chunk);\n      });\n    }\n    return context.client.getQueryData(context.queryKey);\n  };\n}\nexport { streamedQuery };","map":{"version":3,"names":["streamedQuery","queryFn","refetchMode","context","query","client","getQueryCache","find","queryKey","exact","state","data","setState","status","error","fetchStatus","stream","chunk","signal","aborted","setQueryData","prev","concat","getQueryData"],"sources":["/Users/bts-ank-0608/Final-Project/frontend/node_modules/@tanstack/query-core/build/legacy/streamedQuery.js"],"sourcesContent":["import \"./chunk-PXG64RU4.js\";\n\n// src/streamedQuery.ts\nfunction streamedQuery({\n  queryFn,\n  refetchMode\n}) {\n  return async (context) => {\n    if (refetchMode !== \"append\") {\n      const query = context.client.getQueryCache().find({ queryKey: context.queryKey, exact: true });\n      if (query && query.state.data !== void 0) {\n        query.setState({\n          status: \"pending\",\n          data: void 0,\n          error: null,\n          fetchStatus: \"fetching\"\n        });\n      }\n    }\n    const stream = await queryFn(context);\n    for await (const chunk of stream) {\n      if (context.signal.aborted) {\n        break;\n      }\n      context.client.setQueryData(\n        context.queryKey,\n        (prev = []) => {\n          return prev.concat(chunk);\n        }\n      );\n    }\n    return context.client.getQueryData(context.queryKey);\n  };\n}\nexport {\n  streamedQuery\n};\n//# sourceMappingURL=streamedQuery.js.map"],"mappings":"AAAA,OAAO,qBAAqB;;AAE5B;AACA,SAASA,aAAaA,CAAC;EACrBC,OAAO;EACPC;AACF,CAAC,EAAE;EACD,OAAO,MAAOC,OAAO,IAAK;IACxB,IAAID,WAAW,KAAK,QAAQ,EAAE;MAC5B,MAAME,KAAK,GAAGD,OAAO,CAACE,MAAM,CAACC,aAAa,CAAC,CAAC,CAACC,IAAI,CAAC;QAAEC,QAAQ,EAAEL,OAAO,CAACK,QAAQ;QAAEC,KAAK,EAAE;MAAK,CAAC,CAAC;MAC9F,IAAIL,KAAK,IAAIA,KAAK,CAACM,KAAK,CAACC,IAAI,KAAK,KAAK,CAAC,EAAE;QACxCP,KAAK,CAACQ,QAAQ,CAAC;UACbC,MAAM,EAAE,SAAS;UACjBF,IAAI,EAAE,KAAK,CAAC;UACZG,KAAK,EAAE,IAAI;UACXC,WAAW,EAAE;QACf,CAAC,CAAC;MACJ;IACF;IACA,MAAMC,MAAM,GAAG,MAAMf,OAAO,CAACE,OAAO,CAAC;IACrC,WAAW,MAAMc,KAAK,IAAID,MAAM,EAAE;MAChC,IAAIb,OAAO,CAACe,MAAM,CAACC,OAAO,EAAE;QAC1B;MACF;MACAhB,OAAO,CAACE,MAAM,CAACe,YAAY,CACzBjB,OAAO,CAACK,QAAQ,EAChB,CAACa,IAAI,GAAG,EAAE,KAAK;QACb,OAAOA,IAAI,CAACC,MAAM,CAACL,KAAK,CAAC;MAC3B,CACF,CAAC;IACH;IACA,OAAOd,OAAO,CAACE,MAAM,CAACkB,YAAY,CAACpB,OAAO,CAACK,QAAQ,CAAC;EACtD,CAAC;AACH;AACA,SACER,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module"}