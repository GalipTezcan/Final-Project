{"ast":null,"code":"import { __privateAdd, __privateGet, __privateSet } from \"./chunk-PXG64RU4.js\";\n\n// src/onlineManager.ts\nimport { Subscribable } from \"./subscribable.js\";\nimport { isServer } from \"./utils.js\";\nvar _online, _cleanup, _setup;\nvar OnlineManager = class extends Subscribable {\n  constructor() {\n    super();\n    __privateAdd(this, _online, true);\n    __privateAdd(this, _cleanup);\n    __privateAdd(this, _setup);\n    __privateSet(this, _setup, onOnline => {\n      if (!isServer && window.addEventListener) {\n        const onlineListener = () => onOnline(true);\n        const offlineListener = () => onOnline(false);\n        window.addEventListener(\"online\", onlineListener, false);\n        window.addEventListener(\"offline\", offlineListener, false);\n        return () => {\n          window.removeEventListener(\"online\", onlineListener);\n          window.removeEventListener(\"offline\", offlineListener);\n        };\n      }\n      return;\n    });\n  }\n  onSubscribe() {\n    if (!__privateGet(this, _cleanup)) {\n      this.setEventListener(__privateGet(this, _setup));\n    }\n  }\n  onUnsubscribe() {\n    var _a;\n    if (!this.hasListeners()) {\n      (_a = __privateGet(this, _cleanup)) == null ? void 0 : _a.call(this);\n      __privateSet(this, _cleanup, void 0);\n    }\n  }\n  setEventListener(setup) {\n    var _a;\n    __privateSet(this, _setup, setup);\n    (_a = __privateGet(this, _cleanup)) == null ? void 0 : _a.call(this);\n    __privateSet(this, _cleanup, setup(this.setOnline.bind(this)));\n  }\n  setOnline(online) {\n    const changed = __privateGet(this, _online) !== online;\n    if (changed) {\n      __privateSet(this, _online, online);\n      this.listeners.forEach(listener => {\n        listener(online);\n      });\n    }\n  }\n  isOnline() {\n    return __privateGet(this, _online);\n  }\n};\n_online = new WeakMap();\n_cleanup = new WeakMap();\n_setup = new WeakMap();\nvar onlineManager = new OnlineManager();\nexport { OnlineManager, onlineManager };","map":{"version":3,"names":["Subscribable","isServer","_online","_cleanup","_setup","OnlineManager","constructor","__privateAdd","__privateSet","onOnline","window","addEventListener","onlineListener","offlineListener","removeEventListener","onSubscribe","__privateGet","setEventListener","onUnsubscribe","_a","hasListeners","call","setup","setOnline","bind","online","changed","listeners","forEach","listener","isOnline","WeakMap","onlineManager"],"sources":["../../src/onlineManager.ts"],"sourcesContent":["import { Subscribable } from './subscribable'\nimport { isServer } from './utils'\n\ntype Listener = (online: boolean) => void\ntype SetupFn = (setOnline: Listener) => (() => void) | undefined\n\nexport class OnlineManager extends Subscribable<Listener> {\n  #online = true\n  #cleanup?: () => void\n\n  #setup: SetupFn\n\n  constructor() {\n    super()\n    this.#setup = (onOnline) => {\n      // addEventListener does not exist in React Native, but window does\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      if (!isServer && window.addEventListener) {\n        const onlineListener = () => onOnline(true)\n        const offlineListener = () => onOnline(false)\n        // Listen to online\n        window.addEventListener('online', onlineListener, false)\n        window.addEventListener('offline', offlineListener, false)\n\n        return () => {\n          // Be sure to unsubscribe if a new handler is set\n          window.removeEventListener('online', onlineListener)\n          window.removeEventListener('offline', offlineListener)\n        }\n      }\n\n      return\n    }\n  }\n\n  protected onSubscribe(): void {\n    if (!this.#cleanup) {\n      this.setEventListener(this.#setup)\n    }\n  }\n\n  protected onUnsubscribe() {\n    if (!this.hasListeners()) {\n      this.#cleanup?.()\n      this.#cleanup = undefined\n    }\n  }\n\n  setEventListener(setup: SetupFn): void {\n    this.#setup = setup\n    this.#cleanup?.()\n    this.#cleanup = setup(this.setOnline.bind(this))\n  }\n\n  setOnline(online: boolean): void {\n    const changed = this.#online !== online\n\n    if (changed) {\n      this.#online = online\n      this.listeners.forEach((listener) => {\n        listener(online)\n      })\n    }\n  }\n\n  isOnline(): boolean {\n    return this.#online\n  }\n}\n\nexport const onlineManager = new OnlineManager()\n"],"mappings":";;;AAAA,SAASA,YAAA,QAAoB;AAC7B,SAASC,QAAA,QAAgB;AADzB,IAAAC,OAAA,EAAAC,QAAA,EAAAC,MAAA;AAMO,IAAMC,aAAA,GAAN,cAA4BL,YAAA,CAAuB;EAMxDM,YAAA,EAAc;IACZ,MAAM;IANRC,YAAA,OAAAL,OAAA,EAAU;IACVK,YAAA,OAAAJ,QAAA;IAEAI,YAAA,OAAAH,MAAA;IAIEI,YAAA,OAAKJ,MAAA,EAAUK,QAAA,IAAa;MAG1B,IAAI,CAACR,QAAA,IAAYS,MAAA,CAAOC,gBAAA,EAAkB;QACxC,MAAMC,cAAA,GAAiBA,CAAA,KAAMH,QAAA,CAAS,IAAI;QAC1C,MAAMI,eAAA,GAAkBA,CAAA,KAAMJ,QAAA,CAAS,KAAK;QAE5CC,MAAA,CAAOC,gBAAA,CAAiB,UAAUC,cAAA,EAAgB,KAAK;QACvDF,MAAA,CAAOC,gBAAA,CAAiB,WAAWE,eAAA,EAAiB,KAAK;QAEzD,OAAO,MAAM;UAEXH,MAAA,CAAOI,mBAAA,CAAoB,UAAUF,cAAc;UACnDF,MAAA,CAAOI,mBAAA,CAAoB,WAAWD,eAAe;QACvD;MACF;MAEA;IACF;EACF;EAEUE,YAAA,EAAoB;IAC5B,IAAI,CAACC,YAAA,OAAKb,QAAA,GAAU;MAClB,KAAKc,gBAAA,CAAiBD,YAAA,OAAKZ,MAAA,CAAM;IACnC;EACF;EAEUc,cAAA,EAAgB;IAzC5B,IAAAC,EAAA;IA0CI,IAAI,CAAC,KAAKC,YAAA,CAAa,GAAG;MACxB,CAAAD,EAAA,GAAAH,YAAA,OAAKb,QAAA,MAAL,gBAAAgB,EAAA,CAAAE,IAAA;MACAb,YAAA,OAAKL,QAAA,EAAW;IAClB;EACF;EAEAc,iBAAiBK,KAAA,EAAsB;IAhDzC,IAAAH,EAAA;IAiDIX,YAAA,OAAKJ,MAAA,EAASkB,KAAA;IACd,CAAAH,EAAA,GAAAH,YAAA,OAAKb,QAAA,MAAL,gBAAAgB,EAAA,CAAAE,IAAA;IACAb,YAAA,OAAKL,QAAA,EAAWmB,KAAA,CAAM,KAAKC,SAAA,CAAUC,IAAA,CAAK,IAAI,CAAC;EACjD;EAEAD,UAAUE,MAAA,EAAuB;IAC/B,MAAMC,OAAA,GAAUV,YAAA,OAAKd,OAAA,MAAYuB,MAAA;IAEjC,IAAIC,OAAA,EAAS;MACXlB,YAAA,OAAKN,OAAA,EAAUuB,MAAA;MACf,KAAKE,SAAA,CAAUC,OAAA,CAASC,QAAA,IAAa;QACnCA,QAAA,CAASJ,MAAM;MACjB,CAAC;IACH;EACF;EAEAK,SAAA,EAAoB;IAClB,OAAOd,YAAA,OAAKd,OAAA;EACd;AACF;AA7DEA,OAAA,OAAA6B,OAAA;AACA5B,QAAA,OAAA4B,OAAA;AAEA3B,MAAA,OAAA2B,OAAA;AA4DK,IAAMC,aAAA,GAAgB,IAAI3B,aAAA,CAAc","ignoreList":[]},"metadata":{},"sourceType":"module"}