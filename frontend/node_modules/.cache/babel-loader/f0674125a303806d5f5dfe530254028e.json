{"ast":null,"code":"import { __privateAdd, __privateGet, __privateMethod, __privateSet } from \"./chunk-PXG64RU4.js\";\n\n// src/queriesObserver.ts\nimport { notifyManager } from \"./notifyManager.js\";\nimport { QueryObserver } from \"./queryObserver.js\";\nimport { Subscribable } from \"./subscribable.js\";\nimport { replaceEqualDeep } from \"./utils.js\";\nfunction difference(array1, array2) {\n  return array1.filter(x => !array2.includes(x));\n}\nfunction replaceAt(array, index, value) {\n  const copy = array.slice(0);\n  copy[index] = value;\n  return copy;\n}\nvar _client, _result, _queries, _options, _observers, _combinedResult, _lastCombine, _lastResult, _observerMatches, _QueriesObserver_instances, trackResult_fn, combineResult_fn, findMatchingObservers_fn, onUpdate_fn, notify_fn;\nvar QueriesObserver = class extends Subscribable {\n  constructor(client, queries, options) {\n    super();\n    __privateAdd(this, _QueriesObserver_instances);\n    __privateAdd(this, _client);\n    __privateAdd(this, _result);\n    __privateAdd(this, _queries);\n    __privateAdd(this, _options);\n    __privateAdd(this, _observers);\n    __privateAdd(this, _combinedResult);\n    __privateAdd(this, _lastCombine);\n    __privateAdd(this, _lastResult);\n    __privateAdd(this, _observerMatches, []);\n    __privateSet(this, _client, client);\n    __privateSet(this, _options, options);\n    __privateSet(this, _queries, []);\n    __privateSet(this, _observers, []);\n    __privateSet(this, _result, []);\n    this.setQueries(queries);\n  }\n  onSubscribe() {\n    if (this.listeners.size === 1) {\n      __privateGet(this, _observers).forEach(observer => {\n        observer.subscribe(result => {\n          __privateMethod(this, _QueriesObserver_instances, onUpdate_fn).call(this, observer, result);\n        });\n      });\n    }\n  }\n  onUnsubscribe() {\n    if (!this.listeners.size) {\n      this.destroy();\n    }\n  }\n  destroy() {\n    this.listeners = /* @__PURE__ */new Set();\n    __privateGet(this, _observers).forEach(observer => {\n      observer.destroy();\n    });\n  }\n  setQueries(queries, options) {\n    __privateSet(this, _queries, queries);\n    __privateSet(this, _options, options);\n    if (process.env.NODE_ENV !== \"production\") {\n      const queryHashes = queries.map(query => __privateGet(this, _client).defaultQueryOptions(query).queryHash);\n      if (new Set(queryHashes).size !== queryHashes.length) {\n        console.warn(\"[QueriesObserver]: Duplicate Queries found. This might result in unexpected behavior.\");\n      }\n    }\n    notifyManager.batch(() => {\n      const prevObservers = __privateGet(this, _observers);\n      const newObserverMatches = __privateMethod(this, _QueriesObserver_instances, findMatchingObservers_fn).call(this, __privateGet(this, _queries));\n      __privateSet(this, _observerMatches, newObserverMatches);\n      newObserverMatches.forEach(match => match.observer.setOptions(match.defaultedQueryOptions));\n      const newObservers = newObserverMatches.map(match => match.observer);\n      const newResult = newObservers.map(observer => observer.getCurrentResult());\n      const hasIndexChange = newObservers.some((observer, index) => observer !== prevObservers[index]);\n      if (prevObservers.length === newObservers.length && !hasIndexChange) {\n        return;\n      }\n      __privateSet(this, _observers, newObservers);\n      __privateSet(this, _result, newResult);\n      if (!this.hasListeners()) {\n        return;\n      }\n      difference(prevObservers, newObservers).forEach(observer => {\n        observer.destroy();\n      });\n      difference(newObservers, prevObservers).forEach(observer => {\n        observer.subscribe(result => {\n          __privateMethod(this, _QueriesObserver_instances, onUpdate_fn).call(this, observer, result);\n        });\n      });\n      __privateMethod(this, _QueriesObserver_instances, notify_fn).call(this);\n    });\n  }\n  getCurrentResult() {\n    return __privateGet(this, _result);\n  }\n  getQueries() {\n    return __privateGet(this, _observers).map(observer => observer.getCurrentQuery());\n  }\n  getObservers() {\n    return __privateGet(this, _observers);\n  }\n  getOptimisticResult(queries, combine) {\n    const matches = __privateMethod(this, _QueriesObserver_instances, findMatchingObservers_fn).call(this, queries);\n    const result = matches.map(match => match.observer.getOptimisticResult(match.defaultedQueryOptions));\n    return [result, r => {\n      return __privateMethod(this, _QueriesObserver_instances, combineResult_fn).call(this, r ?? result, combine);\n    }, () => {\n      return __privateMethod(this, _QueriesObserver_instances, trackResult_fn).call(this, result, matches);\n    }];\n  }\n};\n_client = new WeakMap();\n_result = new WeakMap();\n_queries = new WeakMap();\n_options = new WeakMap();\n_observers = new WeakMap();\n_combinedResult = new WeakMap();\n_lastCombine = new WeakMap();\n_lastResult = new WeakMap();\n_observerMatches = new WeakMap();\n_QueriesObserver_instances = new WeakSet();\ntrackResult_fn = function (result, matches) {\n  return matches.map((match, index) => {\n    const observerResult = result[index];\n    return !match.defaultedQueryOptions.notifyOnChangeProps ? match.observer.trackResult(observerResult, accessedProp => {\n      matches.forEach(m => {\n        m.observer.trackProp(accessedProp);\n      });\n    }) : observerResult;\n  });\n};\ncombineResult_fn = function (input, combine) {\n  if (combine) {\n    if (!__privateGet(this, _combinedResult) || __privateGet(this, _result) !== __privateGet(this, _lastResult) || combine !== __privateGet(this, _lastCombine)) {\n      __privateSet(this, _lastCombine, combine);\n      __privateSet(this, _lastResult, __privateGet(this, _result));\n      __privateSet(this, _combinedResult, replaceEqualDeep(__privateGet(this, _combinedResult), combine(input)));\n    }\n    return __privateGet(this, _combinedResult);\n  }\n  return input;\n};\nfindMatchingObservers_fn = function (queries) {\n  const prevObserversMap = new Map(__privateGet(this, _observers).map(observer => [observer.options.queryHash, observer]));\n  const observers = [];\n  queries.forEach(options => {\n    const defaultedOptions = __privateGet(this, _client).defaultQueryOptions(options);\n    const match = prevObserversMap.get(defaultedOptions.queryHash);\n    if (match) {\n      observers.push({\n        defaultedQueryOptions: defaultedOptions,\n        observer: match\n      });\n    } else {\n      observers.push({\n        defaultedQueryOptions: defaultedOptions,\n        observer: new QueryObserver(__privateGet(this, _client), defaultedOptions)\n      });\n    }\n  });\n  return observers;\n};\nonUpdate_fn = function (observer, result) {\n  const index = __privateGet(this, _observers).indexOf(observer);\n  if (index !== -1) {\n    __privateSet(this, _result, replaceAt(__privateGet(this, _result), index, result));\n    __privateMethod(this, _QueriesObserver_instances, notify_fn).call(this);\n  }\n};\nnotify_fn = function () {\n  var _a;\n  if (this.hasListeners()) {\n    const previousResult = __privateGet(this, _combinedResult);\n    const newTracked = __privateMethod(this, _QueriesObserver_instances, trackResult_fn).call(this, __privateGet(this, _result), __privateGet(this, _observerMatches));\n    const newResult = __privateMethod(this, _QueriesObserver_instances, combineResult_fn).call(this, newTracked, (_a = __privateGet(this, _options)) == null ? void 0 : _a.combine);\n    if (previousResult !== newResult) {\n      notifyManager.batch(() => {\n        this.listeners.forEach(listener => {\n          listener(__privateGet(this, _result));\n        });\n      });\n    }\n  }\n};\nexport { QueriesObserver };","map":{"version":3,"names":["__privateAdd","__privateGet","__privateMethod","__privateSet","notifyManager","QueryObserver","Subscribable","replaceEqualDeep","difference","array1","array2","filter","x","includes","replaceAt","array","index","value","copy","slice","_client","_result","_queries","_options","_observers","_combinedResult","_lastCombine","_lastResult","_observerMatches","_QueriesObserver_instances","trackResult_fn","combineResult_fn","findMatchingObservers_fn","onUpdate_fn","notify_fn","QueriesObserver","constructor","client","queries","options","setQueries","onSubscribe","listeners","size","forEach","observer","subscribe","result","call","onUnsubscribe","destroy","Set","process","env","NODE_ENV","queryHashes","map","query","defaultQueryOptions","queryHash","length","console","warn","batch","prevObservers","newObserverMatches","match","setOptions","defaultedQueryOptions","newObservers","newResult","getCurrentResult","hasIndexChange","some","hasListeners","getQueries","getCurrentQuery","getObservers","getOptimisticResult","combine","matches","r","WeakMap","WeakSet","observerResult","notifyOnChangeProps","trackResult","accessedProp","m","trackProp","input","prevObserversMap","Map","observers","defaultedOptions","get","push","indexOf","_a","previousResult","newTracked","listener"],"sources":["/Users/bts-ank-0608/Final-Project/frontend/node_modules/@tanstack/query-core/build/legacy/queriesObserver.js"],"sourcesContent":["import {\n  __privateAdd,\n  __privateGet,\n  __privateMethod,\n  __privateSet\n} from \"./chunk-PXG64RU4.js\";\n\n// src/queriesObserver.ts\nimport { notifyManager } from \"./notifyManager.js\";\nimport { QueryObserver } from \"./queryObserver.js\";\nimport { Subscribable } from \"./subscribable.js\";\nimport { replaceEqualDeep } from \"./utils.js\";\nfunction difference(array1, array2) {\n  return array1.filter((x) => !array2.includes(x));\n}\nfunction replaceAt(array, index, value) {\n  const copy = array.slice(0);\n  copy[index] = value;\n  return copy;\n}\nvar _client, _result, _queries, _options, _observers, _combinedResult, _lastCombine, _lastResult, _observerMatches, _QueriesObserver_instances, trackResult_fn, combineResult_fn, findMatchingObservers_fn, onUpdate_fn, notify_fn;\nvar QueriesObserver = class extends Subscribable {\n  constructor(client, queries, options) {\n    super();\n    __privateAdd(this, _QueriesObserver_instances);\n    __privateAdd(this, _client);\n    __privateAdd(this, _result);\n    __privateAdd(this, _queries);\n    __privateAdd(this, _options);\n    __privateAdd(this, _observers);\n    __privateAdd(this, _combinedResult);\n    __privateAdd(this, _lastCombine);\n    __privateAdd(this, _lastResult);\n    __privateAdd(this, _observerMatches, []);\n    __privateSet(this, _client, client);\n    __privateSet(this, _options, options);\n    __privateSet(this, _queries, []);\n    __privateSet(this, _observers, []);\n    __privateSet(this, _result, []);\n    this.setQueries(queries);\n  }\n  onSubscribe() {\n    if (this.listeners.size === 1) {\n      __privateGet(this, _observers).forEach((observer) => {\n        observer.subscribe((result) => {\n          __privateMethod(this, _QueriesObserver_instances, onUpdate_fn).call(this, observer, result);\n        });\n      });\n    }\n  }\n  onUnsubscribe() {\n    if (!this.listeners.size) {\n      this.destroy();\n    }\n  }\n  destroy() {\n    this.listeners = /* @__PURE__ */ new Set();\n    __privateGet(this, _observers).forEach((observer) => {\n      observer.destroy();\n    });\n  }\n  setQueries(queries, options) {\n    __privateSet(this, _queries, queries);\n    __privateSet(this, _options, options);\n    if (process.env.NODE_ENV !== \"production\") {\n      const queryHashes = queries.map(\n        (query) => __privateGet(this, _client).defaultQueryOptions(query).queryHash\n      );\n      if (new Set(queryHashes).size !== queryHashes.length) {\n        console.warn(\n          \"[QueriesObserver]: Duplicate Queries found. This might result in unexpected behavior.\"\n        );\n      }\n    }\n    notifyManager.batch(() => {\n      const prevObservers = __privateGet(this, _observers);\n      const newObserverMatches = __privateMethod(this, _QueriesObserver_instances, findMatchingObservers_fn).call(this, __privateGet(this, _queries));\n      __privateSet(this, _observerMatches, newObserverMatches);\n      newObserverMatches.forEach(\n        (match) => match.observer.setOptions(match.defaultedQueryOptions)\n      );\n      const newObservers = newObserverMatches.map((match) => match.observer);\n      const newResult = newObservers.map(\n        (observer) => observer.getCurrentResult()\n      );\n      const hasIndexChange = newObservers.some(\n        (observer, index) => observer !== prevObservers[index]\n      );\n      if (prevObservers.length === newObservers.length && !hasIndexChange) {\n        return;\n      }\n      __privateSet(this, _observers, newObservers);\n      __privateSet(this, _result, newResult);\n      if (!this.hasListeners()) {\n        return;\n      }\n      difference(prevObservers, newObservers).forEach((observer) => {\n        observer.destroy();\n      });\n      difference(newObservers, prevObservers).forEach((observer) => {\n        observer.subscribe((result) => {\n          __privateMethod(this, _QueriesObserver_instances, onUpdate_fn).call(this, observer, result);\n        });\n      });\n      __privateMethod(this, _QueriesObserver_instances, notify_fn).call(this);\n    });\n  }\n  getCurrentResult() {\n    return __privateGet(this, _result);\n  }\n  getQueries() {\n    return __privateGet(this, _observers).map((observer) => observer.getCurrentQuery());\n  }\n  getObservers() {\n    return __privateGet(this, _observers);\n  }\n  getOptimisticResult(queries, combine) {\n    const matches = __privateMethod(this, _QueriesObserver_instances, findMatchingObservers_fn).call(this, queries);\n    const result = matches.map(\n      (match) => match.observer.getOptimisticResult(match.defaultedQueryOptions)\n    );\n    return [\n      result,\n      (r) => {\n        return __privateMethod(this, _QueriesObserver_instances, combineResult_fn).call(this, r ?? result, combine);\n      },\n      () => {\n        return __privateMethod(this, _QueriesObserver_instances, trackResult_fn).call(this, result, matches);\n      }\n    ];\n  }\n};\n_client = new WeakMap();\n_result = new WeakMap();\n_queries = new WeakMap();\n_options = new WeakMap();\n_observers = new WeakMap();\n_combinedResult = new WeakMap();\n_lastCombine = new WeakMap();\n_lastResult = new WeakMap();\n_observerMatches = new WeakMap();\n_QueriesObserver_instances = new WeakSet();\ntrackResult_fn = function(result, matches) {\n  return matches.map((match, index) => {\n    const observerResult = result[index];\n    return !match.defaultedQueryOptions.notifyOnChangeProps ? match.observer.trackResult(observerResult, (accessedProp) => {\n      matches.forEach((m) => {\n        m.observer.trackProp(accessedProp);\n      });\n    }) : observerResult;\n  });\n};\ncombineResult_fn = function(input, combine) {\n  if (combine) {\n    if (!__privateGet(this, _combinedResult) || __privateGet(this, _result) !== __privateGet(this, _lastResult) || combine !== __privateGet(this, _lastCombine)) {\n      __privateSet(this, _lastCombine, combine);\n      __privateSet(this, _lastResult, __privateGet(this, _result));\n      __privateSet(this, _combinedResult, replaceEqualDeep(\n        __privateGet(this, _combinedResult),\n        combine(input)\n      ));\n    }\n    return __privateGet(this, _combinedResult);\n  }\n  return input;\n};\nfindMatchingObservers_fn = function(queries) {\n  const prevObserversMap = new Map(\n    __privateGet(this, _observers).map((observer) => [observer.options.queryHash, observer])\n  );\n  const observers = [];\n  queries.forEach((options) => {\n    const defaultedOptions = __privateGet(this, _client).defaultQueryOptions(options);\n    const match = prevObserversMap.get(defaultedOptions.queryHash);\n    if (match) {\n      observers.push({\n        defaultedQueryOptions: defaultedOptions,\n        observer: match\n      });\n    } else {\n      observers.push({\n        defaultedQueryOptions: defaultedOptions,\n        observer: new QueryObserver(__privateGet(this, _client), defaultedOptions)\n      });\n    }\n  });\n  return observers;\n};\nonUpdate_fn = function(observer, result) {\n  const index = __privateGet(this, _observers).indexOf(observer);\n  if (index !== -1) {\n    __privateSet(this, _result, replaceAt(__privateGet(this, _result), index, result));\n    __privateMethod(this, _QueriesObserver_instances, notify_fn).call(this);\n  }\n};\nnotify_fn = function() {\n  var _a;\n  if (this.hasListeners()) {\n    const previousResult = __privateGet(this, _combinedResult);\n    const newTracked = __privateMethod(this, _QueriesObserver_instances, trackResult_fn).call(this, __privateGet(this, _result), __privateGet(this, _observerMatches));\n    const newResult = __privateMethod(this, _QueriesObserver_instances, combineResult_fn).call(this, newTracked, (_a = __privateGet(this, _options)) == null ? void 0 : _a.combine);\n    if (previousResult !== newResult) {\n      notifyManager.batch(() => {\n        this.listeners.forEach((listener) => {\n          listener(__privateGet(this, _result));\n        });\n      });\n    }\n  }\n};\nexport {\n  QueriesObserver\n};\n//# sourceMappingURL=queriesObserver.js.map"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}